C51 COMPILER V9.60.0.0   MAIN                                                              03/24/2024 22:59:15 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\UV4\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst
                    -) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "System.h"
   2          
   3          //计时变量
   4          u8 icnt;
   5          u8 keycnt,segcnt,ledcnt;
   6          u16 Timer_1000ms;//1s计时变量
   7          u8 pcnt = 0;//长按计时变量
   8          bit keyflag;//长按标志位，长按超过1s后置1
   9          
  10          //题设变量
  11          u8 mode = 1;//主模式。1) 频率显示界面,2) 周期显示界面,3) 电压显示界面
  12          u16 freq;//频率
  13          u32 T;//周期
  14          bit chl;//电压通道切换标志位。光敏电阻0，电位器1。
  15          float U1,U3;//采集到的电压值。光敏电阻通道编号为 1，电位器通道编号为 3。
  16          float utemp;//电压缓存
  17          u16 ftemp;//频率缓存
  18          bit ledflag;//led使能标志位，置1时led全熄灭
  19          u8 led_old = 0xff;//上一led状态
  20          
  21          
  22          void mInfo_Process()
  23          {
  24   1        if(icnt)  return;
  25   1        icnt = 1;
  26   1      
  27   1        U1 = AD_Read(0x43) * 1.0/ 51;//同时读取需调换
  28   1        U3 = AD_Read(0x41) * 1.0/ 51;
  29   1      }
  30          
  31          
  32          
  33          void BTN_Process()
  34          {
  35   1        if(keycnt)  return;
  36   1        keycnt = 1;
  37   1      
  38   1        BTN_Read();
  39   1        
  40   1        if(pres == 0x08){//S4：定义为“界面”按键
  41   2          if(mode == 2) chl = 0;
  42   2          if(mode == 3) mode = 1;
  43   2          else  mode++;
  44   2          return;
  45   2        }
  46   1        
  47   1        if(mode == 3 && pres == 0x04){//S5：定义为电压通道切换按键
  48   2          chl = ~chl;
  49   2          return;
  50   2        }
  51   1        
  52   1        if(pres == 0x02){//S6：定义为通道 3 电压“缓存”按键
  53   2          utemp = U3;
  54   2          return;
C51 COMPILER V9.60.0.0   MAIN                                                              03/24/2024 22:59:15 PAGE 2   

  55   2        }
  56   1        
  57   1        if(pres == 0x01){//S7：定义为频率“缓存”按键
  58   2          ftemp = freq;
  59   2          return;
  60   2        }
  61   1        
  62   1        if(cont == 0x01){//S7 长按键功能，禁用 LED指示灯功能
  63   2          if(++pcnt >= 100){
  64   3            pcnt = 0;
  65   3            keyflag = 1;
  66   3          }
  67   2        }
  68   1        else  pcnt = 0;
  69   1        
  70   1        if(keyflag && rels == 0x01){//长按 S7 按键超过 1 秒后松开按键
  71   2          keyflag = 0;
  72   2          ledflag = ~ledflag;
  73   2        }
  74   1      }
  75          
  76          void SEG_Process()
  77          {
  78   1        u8 i;
  79   1        u8 buf[8];//暂存，处理后输入segbuf
  80   1        
  81   1        if(segcnt)  return;
  82   1        segcnt = 1;
  83   1      
  84   1        switch(mode){
  85   2          case 1:{
  86   3            seg_buf[0] = tab[15];//"F"
  87   3            seg_buf[1] = 0xff;
  88   3            seg_buf[2] = 0xff;//最大值65535，不可能超过五位故熄灭
  89   3            
  90   3            buf[3] = tab[(u8)(freq/10000%10)];
  91   3            buf[4] = tab[(u8)(freq/1000%10)];
  92   3            buf[5] = tab[(u8)(freq/100%10)];
  93   3            buf[6] = tab[(u8)(freq/10%10)];
  94   3            buf[7] = tab[(u8)(freq%10)];
  95   3            
  96   3            i = 3;
  97   3            while(buf[i] == tab[0]){
  98   4              buf[i] = 0xff;//熄灭无效位
  99   4              if(++i == 7)  break;//保证最后一位点亮
 100   4            }
 101   3            for(i = 3; i < 8; i++){
 102   4              seg_buf[i] = buf[i];
 103   4            }
 104   3          }break;
 105   2          
 106   2          case 2:{
 107   3            seg_buf[0] = 0xc8;//"N"
 108   3            
 109   3            buf[1] = tab[(u8)(T/1000000%10)];
 110   3            buf[2] = tab[(u8)(T/100000%10)];
 111   3            buf[3] = tab[(u8)(T/10000%10)];
 112   3            buf[4] = tab[(u8)(T/1000%10)];
 113   3            buf[5] = tab[(u8)(T/100%10)];
 114   3            buf[6] = tab[(u8)(T/10%10)];
 115   3            buf[7] = tab[(u8)(T%10)];
 116   3            
C51 COMPILER V9.60.0.0   MAIN                                                              03/24/2024 22:59:15 PAGE 3   

 117   3            i = 1;
 118   3            while(buf[i] == tab[0]){
 119   4              buf[i] = 0xff;//熄灭无效位
 120   4              if(++i == 7)  break;//保证最后一位点亮
 121   4            }
 122   3            for(i = 3; i < 8; i++){
 123   4              seg_buf[i] = buf[i];
 124   4            }
 125   3          }break;
 126   2          
 127   2          case 3:{
 128   3            seg_buf[0] = 0xc1;//"U"
 129   3            seg_buf[1] = 0xbf;//"-"
 130   3            seg_buf[3] = seg_buf[4] = 0xff;
 131   3            
 132   3            if(~chl){
 133   4              seg_buf[2] = tab[1];
 134   4              seg_buf[5] = tab[(u8)U1 %10] & 0x7f;
 135   4              seg_buf[6] = tab[(u16)(U1 *10) %10];
 136   4              seg_buf[7] = tab[(u16)(U1 *100) %10];
 137   4            }
 138   3            else{
 139   4              seg_buf[2] = tab[3];
 140   4              seg_buf[5] = tab[(u8)U3] & 0x7f;
 141   4              seg_buf[6] = tab[(u16)(U3 *10) %10];
 142   4              seg_buf[7] = tab[(u16)(U3 *100) %10];
 143   4            }
 144   3          }break;
 145   2        }
 146   1      }
 147          
 148          void LED_Process()
 149          {
 150   1        u8 led = 0xff;
 151   1        
 152   1        if(ledcnt)  return;
 153   1        ledcnt = 1;
 154   1      
 155   1        
 156   1        if(utemp && U3 > utemp)   led &= 0xfe;
 157   1        if(ftemp && freq > ftemp) led &= 0xfd;
 158   1        switch(mode){
 159   2          case 1:led &= 0xfb;break;
 160   2          case 2:led &= 0xf7;break;
 161   2          case 3:led &= 0xef;break;
 162   2        }
 163   1        
 164   1        if(ledflag) led = 0xff;
 165   1        
 166   1        if(led != led_old){
 167   2          led_old = led;
 168   2          Device_Ctrl(0x80,led);
 169   2        }
 170   1      }
 171          
 172          
 173          
 174          void Delay1000ms(void)  //@12.000MHz
 175          {
 176   1        unsigned char data i, j, k;
 177   1      
 178   1        _nop_();
C51 COMPILER V9.60.0.0   MAIN                                                              03/24/2024 22:59:15 PAGE 4   

 179   1        _nop_();
 180   1        i = 46;
 181   1        j = 153;
 182   1        k = 245;
 183   1        do
 184   1        {
 185   2          do
 186   2          {
 187   3            while (--k);
 188   3          } while (--j);
 189   2        } while (--i);
 190   1      }
 191          void main()
 192          {
 193   1        Timer0_Init();
 194   1        Timer2_Init();
 195   1        Device_Init();
 196   1        AD_Read(0x41);
 197   1        Delay1000ms();
 198   1        
 199   1        while(1)
 200   1        {
 201   2          mInfo_Process();
 202   2          
 203   2          BTN_Process();
 204   2          SEG_Process();
 205   2          LED_Process();
 206   2        }
 207   1      }
 208          
 209          void T2ISR(void) interrupt 12
 210          {
 211   1        SEG_Display();
 212   1        
 213   1        if(++icnt >= 200)   icnt = 0;
 214   1        if(++keycnt >= 10)  keycnt = 0;
 215   1        if(++segcnt >= 200) segcnt = 0;
 216   1        if(++ledcnt >= 1) ledcnt = 0;
 217   1        
 218   1        if(++Timer_1000ms >= 1000){//读频率，周期
 219   2          Timer_1000ms = 0;
 220   2          TR0 = 0;
 221   2          freq = (TH0 << 8) | TL0;
 222   2          T = (u32)((float)(1.0/freq) * 1000000);
 223   2          TH0 = 0;
 224   2          TL0 = 0;
 225   2          TR0 = 1;
 226   2        }
 227   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1306    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     29      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
